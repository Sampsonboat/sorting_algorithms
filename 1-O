#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
} listint_t;

void swap_nodes(listint_t** list, listint_t* node1, listint_t* node2) {
    if (node1->prev)
        node1->prev->next = node2;
    if (node2->next)
        node2->next->prev = node1;
    node1->next = node2->next;
    node2->prev = node1->prev;
    node1->prev = node2;
    node2->next = node1;

    if (node2->prev == NULL)
        *list = node2;
}

void insertion_sort_list(listint_t** list) {
    if (*list == NULL || (*list)->next == NULL)
        return;

    listint_t* sorted = NULL;
    listint_t* current = *list;
    listint_t* next_node = NULL;

    while (current) {
        next_node = current->next;

        while (current->prev && current->data < current->prev->data) {
            swap_nodes(list, current->prev, current);
            // Print the list after each swap
            listint_t* temp = *list;
            printf("Current List: ");
            while (temp) {
                printf("%d ", temp->data);
                temp = temp->next;
            }
            printf("\n");
        }

        current = next_node;
    }
}

void append(listint_t** list, int data) {
    listint_t* new_node = (listint_t*)malloc(sizeof(listint_t));
    new_node->data = data;
    new_node->next = NULL;

    if (*list == NULL) {
        new_node->prev = NULL;
        *list = new_node;
        return;
    }

    listint_t* last = *list;
    while (last->next != NULL)
        last = last->next;

    last->next = new_node;
    new_node->prev = last;
}

void print_list(listint_t* list) {
    listint_t* current = list;
    while (current) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

int main() {
    listint_t* list = NULL;

    // Sample test data
    append(&list, 64);
    append(&list, 34);
    append(&list, 25);
    append(&list, 12);
    append(&list, 22);
    append(&list, 11);
    append(&list, 90);

    printf("Original List: ");
    print_list(list);

    insertion_sort_list(&list);

    printf("Sorted List: ");
    print_list(list);

    return 0;
}

